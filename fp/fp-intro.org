* 函数式编程思想：你用什么声明？你在声明什么？

** 你用什么声明？
   函数式是指我们数学上的函数f(x)
   你在用什么声明？很显然，函数式就是用函数进行声明的一种编程风格。这里的函数指的是数学含义上的函数。
   算子组成的管道，可以理解：算子实现的是低阶变换，而用户定义的函数将作为这些算子的参数，也就是高阶函数，更直观的理解：数学复合函数
   在严格的函数式编程中，所有函数都遵循数学函数的定义，必须有自变量(入参)，必须有因变量(返回值)。
   用户定义的逻辑以高阶函数的形式体现，即用户可以将自定义函数以参数形式传入其他低阶函数中。
   
   其实就是在用f(x)来声明计算逻辑，只是这个f(x)可以看成是一个比较复杂的复合函数而已。
   严格意义上，一个作业的所有代码，都可以用一行代码写完，也就是一个等式来表达。

** 你在声明什么?
   小学奥数的话题：定义新运算
   定义新运算是指用一个符号和已知运算表达式表示一种新的运算。
   定义新运算是一种特别设计的计算形式，它使用一些特殊的运算符合。
   结合用运算符合定义新运算的概念，可以回答这个问题：你在声明什么？
   答案：用运算符定义一种新运算。

** 函数式编程语言的一些特点
   - 低阶函数与核心数据结构
   - 惰性求值
   - 函数记忆

*** 低阶函数与核心数据结构
    如果使用低阶函数与高阶函数来完成我们的程序，这时其实就是将程序控制权让位于语言，而我们专注于业务逻辑。
    这样做的好处在于，有利于程序优化，享受免费的性能提升午餐。
    语言开发者专注于优化低阶函数，而应用开发者则专注于优化高阶函数。
    低阶函数是复用的，因此当低阶函数性能提升时，程序不需要改一行代码就免费获得性能提升。
    函数编程语言通常只提供几种核心数据结构，供开发者选择，它希望开发者基于这些简单的数据结构组合出复杂的数据结构，这与低阶函数的思想是一致的。
    Spark的核心数据结构只有一个:RDD
*** 惰性求值
    是函数式编程语言常见的一种特性，通常指尽量延后求解表达式的值。
    惰性求值可以用闭包来实现。
*** 函数记忆
    由于函数式编程中，函数本身是无状态的，因此给定入参，一定能得到一定的结果。
    基于此，函数式语言会对函数进行记忆或者缓存。
