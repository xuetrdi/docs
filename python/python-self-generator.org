* Python 中的生成器函数
  - 如果一个类为了构建生成器去实现`__iter__()`方法,那还不如使用生成器函数。
  - 生成器函数时制造生成器的工厂。
  - 生成器用于生成供迭代的数据。
  
** 标准库中的生成器函数`os.walk()`
   - 在遍历目录树的过程中产出文件名,因此递归搜索文件系统像`for`循环那样简单。
   
** itertools 模块提供了 19 个生成器函数。
** 第一组: 用于过滤的生成器函数 
   从输入的可迭代对象中产出元素的子集,而且不修改元素本身
   |-----------+---------------------------------+-------------------------------------------------------------------------------------------------------------|
   | Module    | Function                        | Explanation                                                                                                 |
   |-----------+---------------------------------+-------------------------------------------------------------------------------------------------------------|
   | itertools | compress(it, selector_it)       | 并行处理两个可迭代对象,如果`selector_it`中的元素是真值,产出`it`中对应的元素                                 |
   | itertools | dropwhile(predicate, it)        | 处理`it`,跳过`predicate`的计算结果为真值的元素,产出剩下的各个元素                                           |
   |           | filter(predicate, it)           | 把`it`中各个元素传个`predicate`,`predicate(item)`返回真,产出元素;如果`predicate`是 None,只产出真值元素      |
   | itertools | filterfalse(predicate, it)      | 与`filter`函数的作用类似,不过`predicate`的逻辑是相反的,`predicate`返回假时产出对应的元素                    |
   | itertools | islice(it, start, stop, step=1) | 产出`it`的切片,类似`s[:stop]`或`s[start:stop:step]`,不过`it`可以是任何可迭代的对象,而且这个函数的死惰性操作 |
   | itertools | takewhile(predicate, it)        | `predicate`返回真值时产出对应的元素,然后立即停止,不在继续检查                                               |
   |-----------+---------------------------------+-------------------------------------------------------------------------------------------------------------|
   
** 第二组: 用于映射的生成器函数
   在输入的单个或多个可迭代对象中的各个元素上做计算,然后返回结果。
   |-----------+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------|
   | Module    | Function                      | Explanation                                                                                                                         |
   |-----------+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------|
   | itertools | accumulate(it, [func])        | 产出积累的总和,如果提供了`func`那么把前面两个元素传给它,然后把计算结果和下一个元素传给它,以此类推,产出结果,操作当前元素和上一个元素 |
   |-----------+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------|
   |           | enumerate(iterable, start=0)  | 产出由两个元素组成的元组,结构是(index,item),其中`index`从`start`开始计数,`item`从`iterable`中获取                                   |
   |-----------+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------|
   |           | map(func, it1, [it2,...,itN]) | 把`it`中的各个元素传入`func`,产出结果,如果传入`N`个可迭代对象,那么`func`必须能接受`N`个参数,并且能够并行处理各个可迭代对象          |
   |-----------+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------|
   | itertools | starmap(func, it)             | 把`it`中的各个元素传给`func`,产出结果,输入的可迭代对象应该产出可迭代的元素`iit`,然后以`func(*iit)`这种形式调用`func`                |
   |-----------+-------------------------------+-------------------------------------------------------------------------------------------------------------------------------------|
   
** 第三组: 用于合并的生成器函数
   |-----------+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
   | Module    | Function                               | Explanation                                                                                                                                    |
   |-----------+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
   | itertools | chain(it1,...,itN)                     | 先产出`it1`中所有元素,然后产出`it2`中所有元素,依次产出所有迭代器元素,无缝连接在一起                                                            |
   |-----------+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
   | itertools | chain.from_iterable(it)                | 产出`it`生成的各个迭代对象中的元素,一个接一个,无缝连接在一起,`it`应该产出可迭代的元素                                                          |
   |-----------+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
   | itertools | product(it1,...,itN)                   | 计算笛卡尔积,从输入的各个可迭代对象中获取元素,合并成由`N`个元素组成的元组,与嵌套的`for`循环效果一样,`repeat`指明重复处理多少次输入的可迭代对象 |
   |-----------+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
   |           | zip(it1,...itN)                        | 并行从输入的各个可迭代对象中获取元素,产出由`N`个元素组成的元组,只要一个可迭代的对象到头                                                        |
   |-----------+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|
   | itertools | zip_longest(it1,...,itN,fillvalue=None | 并行从输入的各个可迭代对象中获取元素,产出由`N`个元素组成的元组,等到最长的可迭代对象到头才停止,空缺值使用`fillvalue`填充                        |
   |-----------+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------|

** 第四组: 把输入的各个元素扩展成多个输出元素的生成器函数
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|
   | Module    | Function                                   | Explanation                                                                                 |
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|
   | itertools | combination(it, out_len)                   | 把`it`产出的`out_len`个元素组合在一起,然后产出                                              |
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|
   | itertools | combinations_with_replacement(it, out_len) | 把`it`产出的`out_len`个元素组合在一起,然后产出包含相同元素的组合                            |
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|
   | itertools | count(start=0, step=1)                     | 把`start`开始不断产出数字,按`step`指定的步幅增加                                            |
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|
   | itertools | cycle(it)                                  | 从`it`中产出各个元素,存储各个元素的副本,然后按顺序重复不断地产出各个元素                    |
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|
   | itertools | permutations(it, out_len=None)             | 把`out_len`个`it`产出的元素排列在一起,然后产出这些排列;`out_len`的默认值等于`len(list(it))` |
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|
   | itertools | repeat(item, [times])                      | 重复不断地产出指定的元素,除非提供`times`,指定次数                                           |
   |-----------+--------------------------------------------+---------------------------------------------------------------------------------------------|

** 第五组: 用于产出输入的可迭代对象中的全部元素,不过会以某种方式重新排序
   |-----------+-----------------------+-------------------------------------------------------------------------------------------------------|
   | Module    | Function              | Explanation                                                                                           |
   |-----------+-----------------------+-------------------------------------------------------------------------------------------------------|
   | itertools | groupby(it, key=None) | 产出由两个元素组成的元素,形式为`(key,group)`,其中`key`是分组标准,`group`是生成器,用于产出分组里的元素 |
   |-----------+-----------------------+-------------------------------------------------------------------------------------------------------|
   |           | reversed(seq)         | 从后向前,倒序产出`seq`中的元素;`seq`必须是序列,或者是实现了`__reversed__`特殊方法的对象               |
   |-----------+-----------------------+-------------------------------------------------------------------------------------------------------|
   | itertools | tee(it, n=2)          | 产出一个有`n`个生成器组成的元组,每个生成器用于单独产出输入的可迭代对象中的元素                        |
   |-----------+-----------------------+-------------------------------------------------------------------------------------------------------|

** 总结
   这些函数的优秀特性: 这些函数的参数都是生成器,而返回的结果也是生成器,因此能以很多的方式结合在一起使用。

** 可迭代的归约函数
   读取迭代器,返回单个值的内置函数
   |-----------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------|
   | Module    | Function                   | Explanation                                                                                                                    |
   |-----------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------|
   |           | all(it)                    | `it`中所有的元素都是真值时返回`True`,否则返回`False`,`all([])返回`True`                                                        |
   |-----------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------|
   |           | any(it)                    | 只要`it`中有元素为真值就返回`True`,否则返回`False`,`any([])`返回`False`                                                        |
   |-----------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------|
   |           | max(it, [key=,], [default] | 返回`it`中最大的元素,`key`是排序函数,与`sorted`函数中的一样,如果可迭代对象为空,返回`default`                                   |
   |-----------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------|
   | functools | reduce(func, it, [initial] | 把前两个元素传给`func`,然后把计算结果和第三个元素传给`func`,依次类推,返回最后的结果,如果提供了`initial`,把它当做第一个元素传入 |
   |-----------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------|
   |           | sum(it, start=0)           | `it`中所有元素的总和,如果提供了可选的`start`,会把它加上                                                                        |
   |-----------+----------------------------+--------------------------------------------------------------------------------------------------------------------------------|
