* Python 中的生成器函数
  如果一个类为了构建生成器去实现`__iter__()`方法,那还不如使用生成器函数。
  生成器函数时制造生成器的工厂。
  
** 标准库中的生成器函数`os.walk()`
   - 在遍历目录树的过程中产出文件名,因此递归搜索文件系统像`for`循环那样简单。
   
** itertools 模块提供了 19 个生成器函数。
** 第一组: 用于过滤的生成器函数 
   从输入的可迭代对象中产出元素的子集,而且不修改元素本身
   |-----------+---------------------------------+-------------------------------------------------------------------------------------------------------------|
   | Module    | Function                        | Explanation                                                                                                 |
   |-----------+---------------------------------+-------------------------------------------------------------------------------------------------------------|
   | itertools | compress(it, selector_it)       | 并行处理两个可迭代对象,如果`selector_it`中的元素是真值,产出`it`中对应的元素                                 |
   | itertools | dropwhile(predicate, it)        | 处理`it`,跳过`predicate`的计算结果为真值的元素,产出剩下的各个元素                                           |
   |           | filter(predicate, it)           | 把`it`中各个元素传个`predicate`,`predicate(item)`返回真,产出元素;如果`predicate`是 None,只产出真值元素      |
   | itertools | filterfalse(predicate, it)      | 与`filter`函数的作用类似,不过`predicate`的逻辑是相反的,`predicate`返回假时产出对应的元素                    |
   | itertools | islice(it, start, stop, step=1) | 产出`it`的切片,类似`s[:stop]`或`s[start:stop:step]`,不过`it`可以是任何可迭代的对象,而且这个函数的死惰性操作 |
   | itertools | takewhile(predicate, it)        | `predicate`返回真值时产出对应的元素,然后立即停止,不在继续检查                                               |
   |-----------+---------------------------------+-------------------------------------------------------------------------------------------------------------|
   
** 第二组: 用于映射的生成器函数
   |-----------+-------------------------------+----------------------------------------------------------------------------------------------------------------------------|
   | Module    | Function                      | Explanation                                                                                                                |
   |-----------+-------------------------------+----------------------------------------------------------------------------------------------------------------------------|
   | itertools | accumulate(it, [func])        | 产出积累的总和,如果提供了`func`那么把前面两个元素传给它,然后把计算结果和下一个元素传给它,以此类推,产出结果                 |
   |-----------+-------------------------------+----------------------------------------------------------------------------------------------------------------------------|
   |           | enumerate(iterable, start=0)  | 产出由两个元素组成的元组,结构是(index,item),其中`index`从`start`开始计数,`item`从`iterable`中获取                          |
   |-----------+-------------------------------+----------------------------------------------------------------------------------------------------------------------------|
   |           | map(func, it1, [it2,...,itN]) | 把`it`中的各个元素传入`func`,产出结果,如果传入`N`个可迭代对象,那么`func`必须能接受`N`个参数,并且能够并行处理各个可迭代对象 |
   |-----------+-------------------------------+----------------------------------------------------------------------------------------------------------------------------|
   | itertools | starmap(func, it)             | 把`it`中的各个元素传给`func`,产出结果,输入的可迭代对象应该产出可迭代的元素`iit`,然后以`func(*iit)`这种形式调用`func`       |
   |-----------+-------------------------------+----------------------------------------------------------------------------------------------------------------------------|
