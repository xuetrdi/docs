* Linear algebra and decompositions
   求解线性系统，计算各种分解，如LU,QR,SVD，特征分解。
  
** Basic linear solving(基本线性求解)
   方程写成单个矩阵方程
   - ColPivHouseholderQR是一个带有列旋转的QR分解。适用于所有矩阵，同时速度非常快。
   - partialPivLu()
   - fullPivLu()
   - householdQr()
   - colPivHouseholderQr()
   - fullPivHouseholderQr()
   - completeOrthogonalDecomposition()
   - llt()
   - ldlt()
   - bdcSvd()
   - jacobiSvd()
   如果矩阵是正定(positive definite)的，那么一个很好的选择就是采用LLT或LDLT分解
   以上矩阵都提供了一个相同的方法slove()
   #+BEGIN_SRC c++
     #include <iostream>
     #include <Eigen/Dense>
     using namespace std;
     using namespace Eigen;
     int main()
     {
       Matrix2f A, b;
       A << 2, -1, -1, 3;
       b << 1, 2, 3, 1;
       cout << "Here is the matrix A:\n" << A << endl;
       cout << "Here is the right hand side b:\n" << b << endl;
       Matrix2f x = A.ldlt().solve(b);
       cout << "The solution is:\n" << x << endl;
     }
   #+END_SRC
** Checking if a solution really exists(检查是否存在解)
** Computing eigenvalues and eigenvectors(计算特征值和特征向量)
   在进行特征分解的时候需要确认矩阵是否是：self-adjoit
   特征值和特征向量的计算不一定会收敛，但是这种收敛失败的情况很少见。
   调用info()检查这种可能性。
   #+BEGIN_SRC c++
     #include <iostream>
     #include <Eigen/Dense>
     int main()
     {
       Matrix2f A;
       A << 1, 2, 2, 3;
       cout << "Here is the matrix A:\n" << A << endl;
       SelfAdjointEigenSolver<Matrix2f> eigensolver(A);
       if(eigensolver.info() != Success) abort();
       cout << "The eigenvalues of A are:\n" << eigensolver.eigenvalues() <<< endl;
       cout << "Here's a matrix whose columns are eigenvectors A\n"
            << "Corresponding to these eigenvalues:\n"
            << eigensolver.eigenvectors() << endl;
     }
   #+END_SRC
** Computing inverse and determinant(计算逆和行列式)
   虽然逆和行列式是基本的数学概念，但在线性代数中，它们并不像纯数学中那样受欢迎。
   逆运算机场由solve()代替操作，并且行列式通常不是检查矩阵是否可逆的好办法。
   然而，对于非常小的矩阵，逆和行列式可能非常有用
   虽然某些分解(PartialPivLU,FullPivLU)提供了inverse()和determinant()方法，但也可以直接在矩阵上调用这两个方法。
   如果矩阵是非常小的固定大小，则允许Eigen避免执行LU分解，而使用小矩阵上更有效的方法。
   #+BEGIN_SRC c++
     #include <iostream>
     #include <Eigen/Dense>
     using namespace std;
     using namespace Eigen;
     int main()
     {
       Matrix3f A;
       A << 1, 2, 1,
            2, 1, 0,
            -1, 1, 2;
       cout << "Here is the matrix A:\n" << A << endl;
       cout << "The determinant of A is:" << A.determinant() << endl;
       cout << "The inverse of A is:\n" << A.inverse() << endl;
     }
   #+END_SRC
** Least squares solving(最小二乘法求解)
   进行最小二乘法最准确的方法是SVD分解
   Eigen提供了两种实现方式：
   - 推荐BDCSVD,可以很好扩展到大问题，并自动回退到JacobiSVD难以解决较小的问题,两个类的solver()方法进行最小二乘法求解。
   - 另一种实现更快但不太可靠的方法是使用normal matrix的Cholesky分解或者QR分解
   #+BEGIN_SRC c++
     #include <iostream>
     #include <Eigen/Dense>
     int main()
     {
       MatrixXf A = MatrixXf::Random(3, 2);
       cout << "Here is the matrix A:\n" << A << endl;
       VectorXf b = VectorXf::Random(3);
       cout << "Here is the right hand side b:\n" << b << endl;
       cout << "The least-squares solution is:\n" 
            << A.bdsSvd(ComputeThinU | ComputeThinV).solve(b) << endl;
     }
   #+END_SRC
** Separating the computation from the construction(将构造与计算分开)
   上面的例子是构造和计算一起进行。
   计算分解分开成为可能的条件：
   - 所有分解都有一个默认的构造函数
   - 所有分解都有一个计算矩阵方法来进行计算，并且可以再已经计算的分解上再次调用，重新初始化。
** Rank-revealing decompositions
   某些分解是显示Rank的，即能够计算矩阵的Rank，这些通常也是在非满秩矩阵(奇异矩阵)中表现最佳的分解
   Rank-revealing分解至少提供一个rank()方法。
   还提供了isInvertible(),还提供了计算矩阵的内核(0空间)和图像(列空间),就像FullPivLU()一样
   rank的计算取决于选择的arbitrary threshold,因为实际上没有浮点矩阵确实是rank-deficient
   Eigen选择合理的默认阈值，这取决于分解，但通常是对角线大小乘以机器epsilon
   可以在rank()之前setThreshold()或其它需要使用此阈值的方法来设置。==> 阈值决定秩的大小
   分解本身,即compute()方法，与阈值无关，更改阈值后，无需重新计算分解。
   #+BEGIN_SRC c++
     #include <iostream>
     #include <Eigen/Dense>
     int main()
     {
       Matrix2d A;
       A << 2, 1,
            2, 0.9999999;
       FullPivLU<Matrix2d> lu(A);
       cout << "By default, the rank of A is found to be: " << lu.rank() <≺endl;
       lu.setThreshold(1e-5);
       cout << "With threshold 1e-5, the rank of A is found to be:" << lu.rank() << endl;
     }
   #+END_SRC
